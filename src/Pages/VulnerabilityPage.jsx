"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  FaShieldAlt,
  FaSearch,
  FaFilter,
  FaExclamationTriangle,
  FaBookmark,
  FaDownload,
  FaBell,
  FaSort,
} from "react-icons/fa";

const fetchVulnerabilities = async () => {
  return [
    {
      id: 1,
      name: "SQL Injection",
      severity: "Critical",
      status: "Open",
      exploitability: 9.8,
      type: "Injection",
      date: "2025-02-16",
    },
    {
      id: 2,
      name: "Cross-Site Scripting",
      severity: "High",
      status: "In Progress",
      exploitability: 8.5,
      type: "XSS",
      date: "2025-02-15",
    },
    {
      id: 3,
      name: "CSRF Attack",
      severity: "Medium",
      status: "Resolved",
      exploitability: 6.2,
      type: "CSRF",
      date: "2025-02-14",
    },
    {
      id: 4,
      name: "Remote Code Execution",
      severity: "Critical",
      status: "Open",
      exploitability: 9.9,
      type: "Execution",
      date: "2025-02-13",
    },
    {
      id: 5,
      name: "Privilege Escalation",
      severity: "High",
      status: "In Progress",
      exploitability: 8.3,
      type: "Privilege Escalation",
      date: "2025-02-12",
    },
  ];
};

const VulnerabilityPage = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterSeverity, setFilterSeverity] = useState("all");
  const [sortBy, setSortBy] = useState("date");
  const [bookmarked, setBookmarked] = useState([]);
  const [currentDateTime, setCurrentDateTime] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      const data = await fetchVulnerabilities();
      setVulnerabilities(data);
      setLoading(false);
    };
    fetchData();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentDateTime(new Date().toUTCString());
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    if (sortBy === "severity") return b.exploitability - a.exploitability;
    if (sortBy === "date") return new Date(b.date) - new Date(a.date);
    if (sortBy === "status") return a.status.localeCompare(b.status);
    return 0;
  });

  const filteredVulnerabilities = sortedVulnerabilities.filter(
    (vuln) =>
      (filterSeverity === "all" ||
        vuln.severity.toLowerCase() === filterSeverity.toLowerCase()) &&
      vuln.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const toggleBookmark = (id) => {
    setBookmarked((prev) =>
      prev.includes(id) ? prev.filter((b) => b !== id) : [...prev, id]
    );
  };

  const exportToCSV = () => {
    const csvContent =
      "data:text/csv;charset=utf-8," +
      "ID,Name,Severity,Status,Exploitability,Date\n" +
      vulnerabilities
        .map(
          (v) =>
            `${v.id},${v.name},${v.severity},${v.status},${v.exploitability},${v.date}`
        )
        .join("\n");

    const link = document.createElement("a");
    link.href = encodeURI(csvContent);
    link.download = "Vulnerability_Report.csv";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const vulnerabilityTypes = [
    ...new Set(vulnerabilities.map((vuln) => vuln.type)),
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900 text-white text-2xl">
        Loading...
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 p-6 text-white">
      <div className="max-w-6xl mx-auto">
        <header className="flex items-center gap-4 mb-6">
          <FaShieldAlt className="text-4xl text-blue-500" />
          <h1 className="text-3xl font-bold">Vulnerability Reports</h1>
          <button
            onClick={exportToCSV}
            className="ml-auto bg-blue-500 px-4 py-2 rounded-lg flex items-center"
          >
            <FaDownload className="mr-2" /> Export CSV
          </button>
        </header>

        <p className="text-gray-400">Current Time (UTC): {currentDateTime}</p>

        <div className="grid grid-cols-3 gap-4 text-center mt-6">
          <div className="bg-gray-800 p-4 rounded-lg">
            <h2 className="text-xl font-bold">{vulnerabilities.length}</h2>
            <p className="text-gray-400">Total Vulnerabilities</p>
          </div>
          <div className="bg-gray-800 p-4 rounded-lg">
            <h2 className="text-xl font-bold">{vulnerabilityTypes.length}</h2>
            <p className="text-gray-400">Types of Vulnerabilities</p>
          </div>
          <div className="bg-gray-800 p-4 rounded-lg">
            <h2 className="text-xl font-bold">
              {vulnerabilities.filter((v) => v.severity === "Critical").length}
            </h2>
            <p className="text-gray-400">Critical Vulnerabilities</p>
          </div>
        </div>

        <div className="flex flex-col md:flex-row gap-4 mt-6">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search vulnerabilities..."
            className="w-full px-4 py-2 bg-gray-800 rounded-lg"
          />

          <select
            value={filterSeverity}
            onChange={(e) => setFilterSeverity(e.target.value)}
            className="bg-gray-800 px-4 py-2 rounded-lg"
          >
            <option value="all">All Severities</option>
            <option value="Critical">Critical</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
          </select>

          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="bg-gray-800 px-4 py-2 rounded-lg"
          >
            <option value="date">Sort by Date</option>
            <option value="severity">Sort by Severity</option>
            <option value="status">Sort by Status</option>
          </select>
        </div>

        <div className="mt-6 space-y-4">
          {filteredVulnerabilities.map((vuln) => (
            <motion.div key={vuln.id} className="bg-gray-800 p-5 rounded-lg">
              <h3 className="text-xl font-semibold">{vuln.name}</h3>
              <p className="text-gray-400">Severity: {vuln.severity}</p>
              <p className="text-gray-400">Type: {vuln.type}</p>
              <p className="text-gray-400">
                Exploitability: {vuln.exploitability}
              </p>
              <button
                onClick={() => toggleBookmark(vuln.id)}
                className="text-yellow-400 mt-2"
              >
                {bookmarked.includes(vuln.id) ? "⭐ Bookmarked" : "☆ Bookmark"}
              </button>
            </motion.div>
          ))}
        </div>
        <div class="vulnerability-container max-w-6xl mx-auto p-6 bg-gray-800 rounded-lg shadow-md animate-fadeIn mt-5">
          <h2 class="text-2xl font-bold text-center text-gray-100 animate-fadeIn">
            Common Vulnerability Types and Their Details
          </h2>

          <h3 class="text-xl font-semibold text-blue-800 mt-6 animate-slideInLeft">
            1. Software Vulnerabilities:
          </h3>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Definition:</strong> These are flaws or weaknesses in
            software code that can be exploited by attackers.
          </p>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Examples:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>
              <strong>Buffer Overflows:</strong> Occur when a program writes
              more data to a buffer than it can hold, potentially allowing
              attackers to execute malicious code.
            </li>
            <li>
              <strong>SQL Injection:</strong> Happens when malicious SQL code is
              inserted into an application's input fields, potentially allowing
              attackers to access or manipulate database data.
            </li>
            <li>
              <strong>Cross-Site Scripting (XSS):</strong> Involves injecting
              malicious scripts into websites, which can then be executed by
              other users' browsers, potentially stealing cookies or sensitive
              information.
            </li>
            <li>
              <strong>Remote Code Execution (RCE):</strong> A highly dangerous
              vulnerability that allows an attacker to execute arbitrary code on
              a remote system.
            </li>
          </ul>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Mitigation:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>Regular software updates and patching.</li>
            <li>Secure coding practices.</li>
            <li>Input validation.</li>
          </ul>

          <h3 class="text-xl font-semibold text-blue-800 mt-6 animate-slideInLeft">
            2. Network Vulnerabilities:
          </h3>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Definition:</strong> These weaknesses exist in network
            infrastructure and protocols.
          </p>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Examples:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>
              <strong>Weak Encryption:</strong> Using outdated or weak
              encryption protocols can allow attackers to intercept and decrypt
              sensitive data.
            </li>
            <li>
              <strong>Misconfigured Firewalls:</strong> Incorrect firewall
              settings can leave ports open to unauthorized access.
            </li>
            <li>
              <strong>Unsecured Wi-Fi:</strong> Open or poorly secured Wi-Fi
              networks can allow attackers to eavesdrop on network traffic.
            </li>
          </ul>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Mitigation:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>Strong encryption protocols.</li>
            <li>Proper firewall configuration.</li>
            <li>Secure Wi-Fi practices.</li>
          </ul>

          <h3 class="text-xl font-semibold text-blue-800 mt-6 animate-slideInLeft">
            3. Hardware Vulnerabilities:
          </h3>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Definition:</strong> These are flaws in the physical design
            or implementation of hardware components.
          </p>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Examples:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>Flaws in CPU design.</li>
            <li>Vulnerabilities in firmware.</li>
          </ul>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Mitigation:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>Firmware updates.</li>
            <li>Hardware replacements.</li>
          </ul>

          <h3 class="text-xl font-semibold text-blue-800 mt-6 animate-slideInLeft">
            4. Human Vulnerabilities:
          </h3>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Definition:</strong> These arise from human error or
            behavior.
          </p>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Examples:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>
              <strong>Phishing:</strong> Tricking users into revealing sensitive
              information.
            </li>
            <li>
              <strong>Weak Passwords:</strong> Using easily guessable passwords.
            </li>
            <li>
              <strong>Social Engineering:</strong> Manipulating individuals into
              performing actions that compromise security.
            </li>
          </ul>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Mitigation:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>Security awareness training.</li>
            <li>Strong password policies.</li>
            <li>Multi-factor authentication (MFA).</li>
          </ul>

          <h3 class="text-xl font-semibold text-blue-800 mt-6 animate-slideInLeft">
            5. Zero-Day Vulnerabilities:
          </h3>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Definition:</strong> These are vulnerabilities that are
            unknown to software vendors or security researchers.
          </p>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Details:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>
              They are particularly dangerous because there are no patches
              available.
            </li>
            <li>
              Attackers can exploit them before anyone is aware of their
              existence.
            </li>
          </ul>
          <p class="text-gray-100 animate-fadeIn">
            <strong>Mitigation:</strong>
          </p>
          <ul class="list-disc list-inside text-gray-100 animate-fadeIn">
            <li>Proactive threat detection.</li>
            <li>Behavioral analysis.</li>
            <li>
              Keeping systems up to date with the latest security patches.
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityPage;
